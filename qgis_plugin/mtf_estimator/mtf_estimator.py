# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MtfEstimator
                                 A QGIS plugin
 Robust ESF, PSF, FWHM & MTF estimation from low quality targets and synthetic edge creation.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-12
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Jorge Gil
        email                : jorge.gil@tutanota.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 3 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from PyQt5.QtWidgets import QAction, QPlainTextEdit
from .mtf_estimator_algorithm import Mtf, Transect, sigmoid
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .mtf_estimator_dialog import MtfEstimatorDialog
import os.path

from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, Qgis, QgsRasterLayer, QgsVectorLayer, QgsMapLayerProxyModel


class MtfEstimator:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MtfEstimator_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&MTF Estimator')        

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MtfEstimator', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/mtf_estimator/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'MTF Estimator'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&MTF Estimator'),
                action)
            self.iface.removeToolBarIcon(action)
            
    """        
    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select output file ","", '*.csv')
        self.dlg.lineEdit.setText(filename)
    """
        
    def console(self, *message):
        message = [str(i) for i in message]
        self.dlg.plainTextEdit.appendPlainText(" ".join(message))        
        
    def finish(self):        
        self.dlg.done(0)
        
        
    def run_mtf_algo(self):
    
        self.console("__START__")        
        #ImageFile = "C:/Users/jrgg/Documents/git/MTF_Estimator/data/baotou_CALVAL_L0R_000000_20200328T032332_202003T032334_MTF_12196_7333.tif"
        #mtf = Mtf(ImageFile, logfunc=self.console)
        
        raster_layer = self.dlg.mMapRasterLayerComboBox.currentLayer()
        #provider = raster_layer.dataProvider().clone()
        band_n = self.dlg.mRasterBandComboBox.currentBand()
      
        self.console(raster_layer.source())

        import gdal, ogr, osr
        import numpy as np
        gdal_layer = gdal.Open(raster_layer.source(), gdal.GA_ReadOnly)
        gt = list(gdal_layer.GetGeoTransform())
        xsize = gdal_layer.RasterXSize
        ysize = gdal_layer.RasterYSize
        band = gdal_layer.GetRasterBand(band_n)
        raster_srs = osr.SpatialReference()
        raster_srs.ImportFromWkt(gdal_layer.GetProjection())
        
        
        # TODO: Calculate shape bounding box
        #vlayer = self.dlg.mMapVectorLayerComboBox.currentLayer().clone()
        vlayer = self.dlg.mMapVectorLayerComboBox.currentLayer()
        #memlayer_drv = ogr.GetDriverByName('MEMORY')
        #memlayer_ds = memlayer_drv.CreateDataSource('')
        #memlayer_drv.Open('aoi',1)
        #outLayer = outDataSource.CreateLayer("states_extent", geom_type=ogr.wkbPolygon)
        #memlayer = memlayer_dsource.CreateLayer('', geom_type=ogr.wkbPolygon)
                
        if str(raster_srs) is '':
            self.console('WARNING: Raster with no CRS')            
            gt[5] = -1*gt[5]
            self.console(gt)
        
        memlayer_drv = ogr.GetDriverByName('Memory')
        memlayer_ds = memlayer_drv.CreateDataSource('')
        memlayer = memlayer_ds.CreateLayer('aoi', raster_srs, geom_type=ogr.wkbPolygon)
        memlayer.CreateField(ogr.FieldDefn('id', ogr.OFTInteger))
        featureDefn = memlayer.GetLayerDefn()
        
        for qgs_feature in vlayer.getFeatures():
            self.console('quepasa')
            self.console(qgs_feature.geometry)    
            featureDefn = memlayer.GetLayerDefn()
            memfeat = ogr.Feature(featureDefn)
            geom = qgs_feature.geometry()
            geom = geom.asWkb()
            geom = ogr.CreateGeometryFromWkb(geom)
            memfeat.SetGeometry(geom)
            memlayer.CreateFeature(memfeat)
        
        """
        # Raster pixel bounds
        extent = memlayer.GetExtent()
        px_min = float('inf')
        px_max = -px_min
        py_min = px_min
        py_max = px_max
        for i in extent[0:2]:
            for j in extent[2:4]:
                px = gt[0] + gt[1]*i + gt[2]*j
                py = gt[3] + gt[4]*i + gt[5]*j
                px_min = min(px,px_min)
                px_max = max(px,px_max)
                py_min = min(py,py_min)
                py_max = min(py,py_max)

        pixel_buffer = 5
        px_min = round(px_min) - pixel_buffer
        px_max = round(px_max) + pixel_buffer
        py_min = round(py_min) - pixel_buffer
        py_max = round(py_max) + pixel_buffer
        px_min = max(1, px_min)
        px_max = min(xsize-1, px_max)
        py_min = max(1, py_min)
        py_max = min(ysize-1, py_max)
        """

        
        # Get extent in raster coords
        extent = memlayer.GetExtent()
        gt_matrix =  np.append(np.array(gt),[1,0,0])        
        inv_gt = np.linalg.inv(np.reshape(gt_matrix, [3,3])) 
        pxoffset = 5
        col_list = []
        row_list = []
        for i in range(0,2):
            for j in range(2,4):
                x = extent[i]
                y = extent[j]               
                v = np.array([[x,y,1]]).T
                ic = np.matmul(inv_gt, v)
                col_list.append(ic[1])    
                row_list.append(ic[2])
        col_min = np.int(np.max([np.floor(np.min(col_list)) - pxoffset,1]))
        col_max = np.int(np.min([np.ceil(np.max(col_list))+pxoffset, xsize-1]))
        row_min = np.int(np.max([np.floor(np.min(row_list)) - pxoffset,1]))
        row_max = np.int(np.min([np.ceil(np.max(row_list))+pxoffset, ysize-1]))
        
        self.console(col_min, col_max, row_min, row_max)
        
        """
        memraster_drv = gdal.GetDriverByName('MEM')
        memraster = memraster_drv.Create('', xsize, ysize, 1, band.DataType)
        memraster.SetProjection(gdal_layer.GetProjection())
        #memraster.SetProjection(vlayer.GetProjection())
        memraster.SetGeoTransform(gt)
        memband = memraster.GetRasterBand(1)        
        #memband.WriteArray(band.ReadAsArray(0, 0, xsize, ysize))
        memband.WriteArray(np.zeros([ysize, xsize]))
        gdal.RasterizeLayer(memraster, [1], memlayer, burn_values=[1])
        mask = memband.ReadAsArray(0, 0, xsize, ysize)
        memband.WriteArray(mask*band.ReadAsArray(0, 0, xsize, ysize))
        mask = None
        """

        sub_gt = gt
        sub_gt[0] = gt[0] + gt[1]*col_min + gt[2]*row_min
        sub_gt[3] = gt[3] + gt[4]*col_min + gt[5]*row_min
        sub_xsize = col_max-col_min
        sub_ysize = row_max-row_min
        memraster_drv = gdal.GetDriverByName('MEM')
        memraster = memraster_drv.Create('', sub_xsize, sub_ysize, 1, band.DataType)
        memraster.SetProjection(gdal_layer.GetProjection())
        memraster.SetGeoTransform(sub_gt)
        memband = memraster.GetRasterBand(1)                
        memband.WriteArray(np.zeros([sub_ysize, sub_xsize]))
        gdal.RasterizeLayer(memraster, [1], memlayer, burn_values=[1])
        mask = memband.ReadAsArray(0, 0, sub_xsize, sub_ysize)
        memband.WriteArray(mask*band.ReadAsArray(col_min, row_min, sub_xsize, sub_ysize))
        mask = None
        
        #gdal.RasterizeLayer(memraster, [0], memlayer)
        
        """
        # From SNOS
        drv = ogr.GetDriverByName("memory")
        reference_proj = vector_layer.GetSpatialRef()
        raster_proj = self.srs
        reproj = osr.CoordinateTransformation(reference_proj, raster_proj)    
        mygeom = feat.GetGeometryRef()        
        mygeom.AssignSpatialReference(reference_proj)
        mygeom.Transform(reproj)
        feat.SetGeometry(diff)
        tmp_ds = drv.CreateDataSource("")
        tmp_layer = tmp_ds.CreateLayer("homo", raster_proj, geom_type=ogr.wkbPolygon)           
        tmp_layer.CreateFeature(feat.Clone())
        gdal.RasterizeLayer(tmp_raster, [1], tmp_layer, burn_values = [nodata_val])
        rad = tmp_band.ReadAsArray(0,0,self.cols,self.rows).flatten()
        """
        
        """
        feature_count = memlayer.GetFeatureCount()
        self.console(feature_count)
        for i in range(0, feature_count):
            feat = memlayer.GetFeature(i).Clone()            
            #if feat.GetField("dn") != 1: continue                                          
            #tmp_band.WriteArray(data,0,0)            
            #geoenv = geoenv.Clone()
            #geoenv.Transform(reproj)
            mygeom = feat.GetGeometryRef()
            self.console(mygeom)
        """
        
        """
        import matplotlib.pyplot as plt
        plt.close('all')
        masked_data = memband.ReadAsArray(0, 0, xsize, ysize)
        plt.imshow(masked_data)
        plt.show()
        """
        
        #ImageFile = "C:/Users/jrgg/Documents/git/MTF_Estimator/data/baotou_CALVAL_L0R_000000_20200328T032332_202003T032334_MTF_12196_7333.tif"
        ImageFile = memraster
        mtf = Mtf(ImageFile, logfunc=self.console)
        
        #for field in vlayer.fields():
        #    self.console(field.name(), field.typeName())        
        #self.console(vlayer.boundingBoxOfSelected())
        
        self.console("__END__")
        
        """
        layers = QgsProject.instance().layerTreeRoot().children()        
        for l in layers:
            self.console(l.name())
            self.console(type(l))
            self.console(type(l.layer()))
            #self.console(type(QgsRasterLayer))
            self.console(isinstance(l.layer(), QgsRasterLayer))
        """

    def set_band(self):
        self.dlg.mRasterBandComboBox.setLayer(self.dlg.mMapRasterLayerComboBox.currentLayer())
        

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MtfEstimatorDialog()
            #self.dlg.pushButton.clicked.connect(self.select_output_file)
            self.dlg.closeButton.clicked.connect(self.finish)
            self.dlg.runButton.clicked.connect(self.run_mtf_algo)
            self.dlg.mMapRasterLayerComboBox.setFilters(QgsMapLayerProxyModel.RasterLayer)
            self.dlg.mMapRasterLayerComboBox.layerChanged.connect(self.set_band)
            self.set_band()
            self.dlg.mMapVectorLayerComboBox.setFilters(QgsMapLayerProxyModel.VectorLayer)
            
            

        # Fetch the currently loaded layers
        #layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous runs
        #self.dlg.edgeRasterLayer.clear()
        # Populate the comboBox with names of all the loaded layers
        #qgis._core.QgsRasterLayer
        #self.dlg.edgeRasterLayer.addItems([layer.name() for layer in layers])
        #for lt in layers:
        #    if isinstance(lt.layer(), QgsRasterLayer):
        #        self.dlg.edgeRasterLayer.addItem(lt.name())


        
        
        #map_layer_combo_box.layerChanged.connect(field_combo_box.setLayer)
        
        

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        # result = self.dlg.exec_()
        
        # See if OK was pressed
        """
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            self.iface.messageBar().pushMessage(
                "Success", "Output file written at ",
                level=Qgis.Success, duration=3)
            pass
        """









